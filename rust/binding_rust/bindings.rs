/* automatically generated by rust-bindgen 0.69.4 */

pub const _ERRNO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _SYS_SYSLOG_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_SYSLOG_PATH_H: u32 = 1;
pub const _PATH_LOG: &[u8; 9] = b"/dev/log\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_NFACILITIES: u32 = 24;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const PATH_MAX: u32 = 1024;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _STDINT_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MAX_REG_AREA: u32 = 8;
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        __ident: *const ::std::os::raw::c_char,
        __option: ::std::os::raw::c_int,
        __facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(__pri: ::std::os::raw::c_int, __fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __ap: *mut __va_list_tag,
    );
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    pub static mut _wiringXLog: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: *const ::std::os::raw::c_char,
            ...
        ),
    >;
}
pub const function_t_FUNCTION_UNKNOWN: function_t = 0;
pub const function_t_FUNCTION_DIGITAL: function_t = 2;
pub const function_t_FUNCTION_ANALOG: function_t = 4;
pub const function_t_FUNCTION_I2C: function_t = 16;
pub const function_t_FUNCTION_INTERRUPT: function_t = 32;
pub type function_t = ::std::os::raw::c_uint;
pub const pinmode_t_PINMODE_NOT_SET: pinmode_t = 0;
pub const pinmode_t_PINMODE_INPUT: pinmode_t = 2;
pub const pinmode_t_PINMODE_OUTPUT: pinmode_t = 4;
pub const pinmode_t_PINMODE_INTERRUPT: pinmode_t = 8;
pub type pinmode_t = ::std::os::raw::c_uint;
pub const isr_mode_t_ISR_MODE_UNKNOWN: isr_mode_t = 0;
pub const isr_mode_t_ISR_MODE_RISING: isr_mode_t = 2;
pub const isr_mode_t_ISR_MODE_FALLING: isr_mode_t = 4;
pub const isr_mode_t_ISR_MODE_BOTH: isr_mode_t = 8;
pub const isr_mode_t_ISR_MODE_NONE: isr_mode_t = 16;
pub type isr_mode_t = ::std::os::raw::c_uint;
pub const digital_value_t_LOW: digital_value_t = 0;
pub const digital_value_t_HIGH: digital_value_t = 1;
pub type digital_value_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wiringXSerial_t {
    pub baud: ::std::os::raw::c_uint,
    pub databits: ::std::os::raw::c_uint,
    pub parity: ::std::os::raw::c_uint,
    pub stopbits: ::std::os::raw::c_uint,
    pub flowcontrol: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_wiringXSerial_t() {
    const UNINIT: ::std::mem::MaybeUninit<wiringXSerial_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wiringXSerial_t>(),
        20usize,
        concat!("Size of: ", stringify!(wiringXSerial_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wiringXSerial_t>(),
        4usize,
        concat!("Alignment of ", stringify!(wiringXSerial_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baud) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wiringXSerial_t),
            "::",
            stringify!(baud)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).databits) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wiringXSerial_t),
            "::",
            stringify!(databits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wiringXSerial_t),
            "::",
            stringify!(parity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stopbits) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wiringXSerial_t),
            "::",
            stringify!(stopbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flowcontrol) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wiringXSerial_t),
            "::",
            stringify!(flowcontrol)
        )
    );
}
extern "C" {
    pub fn delayMicroseconds(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn pinMode(arg1: ::std::os::raw::c_int, arg2: pinmode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXSetup(
        name: *mut ::std::os::raw::c_char,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
                arg4: *const ::std::os::raw::c_char,
                ...
            ),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXGC() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn digitalWrite(
        arg1: ::std::os::raw::c_int,
        arg2: digital_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn digitalRead(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waitForInterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXISR(arg1: ::std::os::raw::c_int, arg2: isr_mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXI2CRead(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXI2CReadReg8(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXI2CReadReg16(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXI2CWrite(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXI2CWriteReg8(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXI2CWriteReg16(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXI2CSetup(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXSPIGetFd(channel: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXSPIDataRW(
        channel: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXSPISetup(
        channel: ::std::os::raw::c_int,
        speed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXSerialOpen(
        arg1: *const ::std::os::raw::c_char,
        arg2: wiringXSerial_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXSerialFlush(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wiringXSerialClose(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wiringXSerialPutChar(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn wiringXSerialPuts(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wiringXSerialPrintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn wiringXSerialDataAvail(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXSerialGetChar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXPWMSetPeriod(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXPWMSetDuty(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXPWMSetPolarity(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXPWMEnable(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXPlatform() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wiringXValidGPIO(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXSelectableFd(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wiringXSupportedPlatforms(
        arg1: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layout_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soc_t {
    pub brand: [::std::os::raw::c_char; 255usize],
    pub chip: [::std::os::raw::c_char; 255usize],
    pub map: *mut ::std::os::raw::c_int,
    pub map_size: usize,
    pub irq: *mut ::std::os::raw::c_int,
    pub irq_size: usize,
    pub layout: *mut layout_t,
    pub support: soc_t__bindgen_ty_1,
    pub gpio: [*mut ::std::os::raw::c_void; 8usize],
    pub fd: ::std::os::raw::c_int,
    pub page_size: usize,
    pub base_addr: [usize; 8usize],
    pub base_offs: [usize; 8usize],
    pub digitalWrite: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: digital_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub digitalRead: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub pinMode: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: pinmode_t) -> ::std::os::raw::c_int,
    >,
    pub isr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: isr_mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub waitForInterrupt: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub setup: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub setMap:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_int, size: usize)>,
    pub setIRQ:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_int, size: usize)>,
    pub getPinName: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
    >,
    pub socSetPWMPeriod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub socSetPWMDuty: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub socSetPWMPolarity: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub socEnablePWM: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub validGPIO: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub selectableFd: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub gc: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub next: *mut soc_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soc_t__bindgen_ty_1 {
    pub isr_modes: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_soc_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<soc_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<soc_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(soc_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<soc_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(soc_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isr_modes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t__bindgen_ty_1),
            "::",
            stringify!(isr_modes)
        )
    );
}
#[test]
fn bindgen_test_layout_soc_t() {
    const UNINIT: ::std::mem::MaybeUninit<soc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<soc_t>(),
        904usize,
        concat!("Size of: ", stringify!(soc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<soc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(soc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(brand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chip) as usize - ptr as usize },
        255usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(chip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_size) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(map_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irq) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irq_size) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(irq_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).support) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpio) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(gpio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        624usize,
        concat!("Offset of field: ", stringify!(soc_t), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_addr) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_offs) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(base_offs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digitalWrite) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(digitalWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digitalRead) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(digitalRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinMode) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(pinMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isr) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(isr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitForInterrupt) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(waitForInterrupt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setup) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setMap) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(setMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setIRQ) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(setIRQ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPinName) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(getPinName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socSetPWMPeriod) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(socSetPWMPeriod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socSetPWMDuty) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(socSetPWMDuty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socSetPWMPolarity) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(socSetPWMPolarity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socEnablePWM) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(socEnablePWM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validGPIO) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(validGPIO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selectableFd) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(selectableFd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        888usize,
        concat!("Offset of field: ", stringify!(soc_t), "::", stringify!(gc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(soc_t),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn soc_register(
        arg1: *mut *mut soc_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn soc_get(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut soc_t;
}
extern "C" {
    pub fn soc_writel(arg1: usize, arg2: u32);
}
extern "C" {
    pub fn soc_readl(arg1: usize) -> u32;
}
extern "C" {
    pub fn soc_gc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soc_sysfs_check_gpio(
        arg1: *mut soc_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soc_sysfs_gpio_export(
        arg1: *mut soc_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soc_sysfs_gpio_unexport(
        arg1: *mut soc_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soc_sysfs_set_gpio_interrupt_mode(
        arg1: *mut soc_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: isr_mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soc_sysfs_set_gpio_direction(
        arg1: *mut soc_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soc_sysfs_gpio_reset_value(
        arg1: *mut soc_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soc_wait_for_interrupt(
        arg1: *mut soc_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct platform_t {
    pub name: *mut *mut ::std::os::raw::c_char,
    pub nralias: ::std::os::raw::c_int,
    pub soc: *mut soc_t,
    pub setup: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub pinMode: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: pinmode_t) -> ::std::os::raw::c_int,
    >,
    pub analogRead: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub digitalWrite: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: digital_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub digitalRead: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub waitForInterrupt: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub isr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: isr_mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub selectableFd: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub pwmSetPeriod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub pwmSetDuty: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub pwmSetPolarity: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub pwmEnable: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub validGPIO: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub gc: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub next: *mut platform_t,
}
#[test]
fn bindgen_test_layout_platform_t() {
    const UNINIT: ::std::mem::MaybeUninit<platform_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<platform_t>(),
        144usize,
        concat!("Size of: ", stringify!(platform_t))
    );
    assert_eq!(
        ::std::mem::align_of::<platform_t>(),
        8usize,
        concat!("Alignment of ", stringify!(platform_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nralias) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(nralias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(soc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setup) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(pinMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).analogRead) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(analogRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digitalWrite) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(digitalWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digitalRead) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(digitalRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitForInterrupt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(waitForInterrupt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(isr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selectableFd) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(selectableFd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwmSetPeriod) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(pwmSetPeriod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwmSetDuty) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(pwmSetDuty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwmSetPolarity) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(pwmSetPolarity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwmEnable) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(pwmEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validGPIO) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(validGPIO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(platform_t),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn platform_register(arg1: *mut *mut platform_t, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn platform_add_alias(arg1: *mut *mut platform_t, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn platform_get_by_name(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut platform_t;
}
extern "C" {
    pub fn platform_iterate(arg1: ::std::os::raw::c_int) -> *mut platform_t;
}
extern "C" {
    pub fn platform_iterate_name(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn platform_gc() -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
